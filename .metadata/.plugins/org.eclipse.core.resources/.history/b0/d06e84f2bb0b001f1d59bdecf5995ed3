#include "app_main.hpp"
#include "gpio.hpp"
#include "timer.hpp"

volatile uint8_t flag = 0;

Gpio redLed(PIN_13, GPIOD, OUTPUT);

//void TIM6_IRQHandler(void) {
//    // Timer interrupt handler code here
//    // This function will be called when TIM6 interrupt occurs
//    // Clear the interrupt flag
//	redLed.Write(HIGH);
//	HAL_Delay(1000);
//	if (TIM6->SR & (0x1UL << TIM_SR_UIF_Pos)) {
//		// Clear the update interrupt flag
//		TIM6->SR &= ~(0x1UL << TIM_SR_UIF_Pos);
//		redLed.Write(HIGH);
//		HAL_Delay(1000);
//		flag = 1;
//	}
//
//}

TIM_HandleTypeDef htim6;

void TIM6_IRQHandler(void) {
    HAL_TIM_IRQHandler(&htim6); // Call HAL IRQ handler
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM6) {
        // Your interrupt handling code here
    }
}

void TIM6_Init(uint32_t period_ms) {
    // Initialize TIM6 peripheral
    htim6.Instance = TIM6;
    htim6.Init.Prescaler = (SystemCoreClock / 1000) - 1; // Prescaler to count in milliseconds
    htim6.Init.Period = period_ms - 1; // Auto-reload register to define period in milliseconds
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    HAL_TIM_Base_Init(&htim6);

    // Enable TIM6 interrupt
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);

    // Start TIM6
    HAL_TIM_Base_Start_IT(&htim6);
}

void app_main(void)
{
//	Gpio greenLed(PIN_12, GPIOD, OUTPUT);
//	Gpio redLed(PIN_13, GPIOD, OUTPUT);
//	Gpio blueLed(PIN_14, GPIOD, OUTPUT);
//	Gpio yellowLed(PIN_15, GPIOD, OUTPUT);
//
//	TimerBasic basic_timer(TIM6,10000-1, 8400-1);
//	basic_timer.start();
	TIM6_Init(1000);
	while(1);
//	while(true)
//	{
//		if(flag == 1)
//		{
//			greenLed.Write(HIGH);
//			redLed.Write(HIGH);
//			blueLed.Write(HIGH);
//			yellowLed.Write(HIGH);
//			flag = 0;
//			_delay_MilliSecond(1000);
//		}else{
//			greenLed.Write(LOW);
//			redLed.Write(LOW);
//			blueLed.Write(LOW);
//			yellowLed.Write(LOW);
//			_delay_MilliSecond(1000);
//		}
//		HAL_Delay(1000);
//	}


}
