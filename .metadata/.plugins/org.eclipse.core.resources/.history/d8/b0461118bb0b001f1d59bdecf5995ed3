#include "app_main.hpp"
#include "gpio.hpp"
#include "timer.hpp"

volatile uint8_t flag = 0;

//Gpio redLed(PIN_13, GPIOD, OUTPUT);
//
//void TIM6_IRQHandler(void) {
//    // Timer interrupt handler code here
//    // This function will be called when TIM6 interrupt occurs
//    // Clear the interrupt flag
//	redLed.Write(HIGH);
//	HAL_Delay(1000);
//	if (TIM6->SR & (0x1UL << TIM_SR_UIF_Pos)) {
//		// Clear the update interrupt flag
//		TIM6->SR &= ~(0x1UL << TIM_SR_UIF_Pos);
//		redLed.Write(HIGH);
//		HAL_Delay(1000);
//		flag = 1;
//	}
//
//}

void TIM6_DAC_IRQHandler()	// Overrides the weak implementation of the IRQ in the startup file
{
	// Toggle LED
	static uint8_t check = 1;
	if(check)
	{
		GPIOD->ODR |= (1<<12);		// Sets PD12
		check = 0;
	}
	else
	{
		GPIOD->ODR &= ~(1<<12);		// Clears PD12
		check = 1;
	}
	__NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
}

void funcGPIOInit()
{
	// Peripheral clock
	RCC->AHB1ENR |= (1<<3);	// Enables AHB1 to use GPIOD peripheral
	// 2. Init GPIO
	GPIOD->MODER |= (1<<24);	// Sets GPIOD as Output
	GPIOD->MODER &= ~(1<<25);	// Sets GPIOD as Output (redundand because bit 25 is already 0 after reset)
	GPIOD->OTYPER &= ~(1<<12);	// Set PD12 as Push Pull
	GPIOD->OSPEEDR &= ~(1<<24); // Sets speed on PD12 to low
	GPIOD->OSPEEDR &= ~(1<<25); // Sets speed on PD12 to low
}
void funcIntInit()
{
	// Initialize the interrupt
	__NVIC_EnableIRQ(TIM6_DAC_IRQn);

	EXTI->IMR |= (1<<0);
	EXTI->EMR |= (1<<0);
	EXTI->FTSR &= ~(1<<0);
	EXTI->RTSR |= (1<<0);

	// SysCfg not needed for basic timer TIM6???
}

void funcTimerInit()
{
	// Peripheral clock
	RCC->APB1ENR |= (1<<4);	// Enables APB1 bus to use Timer 6
	// 2. Init timer
	TIM6->CR1 |= (1<<0);	// CEN: Enables counter
	TIM6->CR1 &= ~(1<<1);	// UDIS: Update event enabled
	TIM6->CR1 |= (1<<2);	// URS: Update request source enabled for overflow/underflow only
	TIM6->CR1 &= ~(1<<3);	// OPM: One Pulse Mode. Counter continues counting.
	TIM6->CR1 &= ~(1<<7);	// Auto reload preload enabled
	TIM6->DIER |= (1<<0);	// UIE: Update interrupt enabled
	TIM6->EGR |= (1<<0);	// UG: Update generation. Re-initializes the counter and updates registers
	//TIM6->CNT = 0x00FA;		// Counter goes up to 250 to have 1s timer ???
	TIM6->PSC = 0xFA00;		// Sets prescaler to 64000. Timer clock is now 16MHz/64000=250Hz
	TIM6->ARR = 0x00FA;		// Counter goes up to 250 to have 1s timer


}

void app_main(void)
{
//	Gpio greenLed(PIN_12, GPIOD, OUTPUT);
//	Gpio redLed(PIN_13, GPIOD, OUTPUT);
//	Gpio blueLed(PIN_14, GPIOD, OUTPUT);
//	Gpio yellowLed(PIN_15, GPIOD, OUTPUT);
//
//	TimerBasic basic_timer(TIM6,10000-1, 8400-1);
//	basic_timer.start();
//	while(true)
//	{
//		if(flag == 1)
//		{
//			greenLed.Write(HIGH);
//			redLed.Write(HIGH);
//			blueLed.Write(HIGH);
//			yellowLed.Write(HIGH);
//			flag = 0;
//			_delay_MilliSecond(1000);
//		}else{
//			greenLed.Write(LOW);
//			redLed.Write(LOW);
//			blueLed.Write(LOW);
//			yellowLed.Write(LOW);
//			_delay_MilliSecond(1000);
//		}
//		HAL_Delay(1000);
//	}
	funcIntInit();
	funcTimerInit();
	funcGPIOInit();
	for(;;);


}
